{"ast":null,"code":"import { deleteData, patchData, postData } from \"../../utils/fetchData\";\nimport { editDataSimple, deleteDataSimple } from \"../../utils/utilsFunction\";\nimport { postTypes } from \"../type/types\";\nimport { alertAction } from \"./alert\";\nimport { createNotifyAction, removeNotifyAction } from \"./notify\";\nexport const createCommentAction = (post, newComment, auth, socket) => async dispatch => {\n  const newPost = { ...post,\n    comments: [...post.comments, newComment]\n  };\n  dispatch({\n    type: postTypes.EDITE_POST,\n    payload: newPost\n  });\n\n  try {\n    const data = { ...newComment,\n      postId: post._id,\n      postUserId: post.user._id\n    };\n    const res = await postData(\"comments\", data, auth.token);\n    const newData = { ...res.data.newComment,\n      user: auth.user\n    };\n    const newPost = { ...post,\n      comments: [...post.comments, newData]\n    };\n    socket.emit(\"createComment\", newPost);\n    dispatch({\n      type: postTypes.EDITE_POST,\n      payload: newPost\n    });\n    const msg = {\n      id: res.data.newComment._id,\n      text: newComment.reply ? \"montioned you in a comment\" : \"has commented on your post\",\n      recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      image: post.images[0].url\n    };\n    dispatch(createNotifyAction({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (error) {\n    dispatch(alertAction({\n      error: error.response.data.msg\n    }));\n  }\n};\nexport const updateCommentAction = _ref => {\n  let {\n    comment,\n    content,\n    post,\n    auth\n  } = _ref;\n  return async dispatch => {\n    const newComment = editDataSimple(post.comments, comment._id, { ...comment,\n      content\n    });\n    const newPost = { ...post,\n      comments: newComment\n    };\n    dispatch({\n      type: postTypes.EDITE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchData(`comments/${comment._id}`, {\n        content\n      }, auth.token);\n    } catch (error) {\n      dispatch(alertAction({\n        error: error.response.data.msg\n      }));\n    }\n  };\n};\nexport const likeCommentAction = _ref2 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref2;\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: [...comment.likes, auth.user]\n    };\n    const newComments = editDataSimple(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: postTypes.EDITE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchData(`comments/${comment._id}/like`, null, auth.token);\n    } catch (error) {\n      dispatch(alertAction({\n        error: error.response.data.msg\n      }));\n    }\n  };\n};\nexport const unLikeCommentAction = _ref3 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref3;\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: deleteDataSimple(comment.likes, auth.user._id)\n    };\n    const newComments = editDataSimple(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: postTypes.EDITE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchData(`comments/${comment._id}/unlike`, null, auth.token);\n    } catch (error) {\n      dispatch(alertAction({\n        error: error.response.data.msg\n      }));\n    }\n  };\n};\nexport const deleteCommentAction = _ref4 => {\n  let {\n    post,\n    auth,\n    comment,\n    socket\n  } = _ref4;\n  return async dispatch => {\n    const deleteArr = [...post.comments.filter(item => item.reply === comment._id), comment];\n    const newPost = { ...post,\n      comments: post.comments.filter(item => !deleteArr.find(da => item._id === da._id))\n    };\n    dispatch({\n      type: postTypes.EDITE_POST,\n      payload: newPost\n    });\n    socket.emit(\"deleteComment\", newPost);\n\n    try {\n      deleteArr.forEach(item => {\n        deleteData(`comments/${item._id}`, auth.token);\n        const msg = {\n          id: item._id,\n          text: comment.reply ? \"mentioned you in a comment.\" : \"has commented on your post.\",\n          recipients: comment.reply ? [comment.tag._id] : [post.user._id],\n          url: `/post/${post._id}`\n        };\n        dispatch(removeNotifyAction({\n          msg,\n          auth,\n          socket\n        }));\n      });\n    } catch (error) {\n      dispatch(alertAction({\n        error: error.response.data.msg\n      }));\n    }\n  };\n};","map":{"version":3,"names":["deleteData","patchData","postData","editDataSimple","deleteDataSimple","postTypes","alertAction","createNotifyAction","removeNotifyAction","createCommentAction","post","newComment","auth","socket","dispatch","newPost","comments","type","EDITE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","msg","id","text","reply","recipients","tag","url","content","image","images","error","response","updateCommentAction","comment","likeCommentAction","likes","newComments","unLikeCommentAction","deleteCommentAction","deleteArr","filter","item","find","da","forEach"],"sources":["C:/Users/owner/Desktop/my-applications/social-media/client/src/redux/actions/comment.js"],"sourcesContent":["import { deleteData, patchData, postData } from \"../../utils/fetchData\";\r\nimport { editDataSimple, deleteDataSimple } from \"../../utils/utilsFunction\";\r\nimport { postTypes } from \"../type/types\";\r\nimport { alertAction } from \"./alert\";\r\nimport { createNotifyAction, removeNotifyAction } from \"./notify\";\r\n\r\nexport const createCommentAction =\r\n  (post, newComment, auth, socket) => async (dispatch) => {\r\n    const newPost = {\r\n      ...post,\r\n      comments: [...post.comments, newComment],\r\n    };\r\n    dispatch({ type: postTypes.EDITE_POST, payload: newPost });\r\n    try {\r\n      const data = {\r\n        ...newComment,\r\n        postId: post._id,\r\n        postUserId: post.user._id,\r\n      };\r\n      const res = await postData(\"comments\", data, auth.token);\r\n      const newData = { ...res.data.newComment, user: auth.user };\r\n      const newPost = {\r\n        ...post,\r\n        comments: [...post.comments, newData],\r\n      };\r\n      socket.emit(\"createComment\", newPost);\r\n\r\n      dispatch({ type: postTypes.EDITE_POST, payload: newPost });\r\n\r\n      const msg = {\r\n        id: res.data.newComment._id,\r\n        text: newComment.reply\r\n          ? \"montioned you in a comment\"\r\n          : \"has commented on your post\",\r\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\r\n        url: `/post/${post._id}`,\r\n        content: post.content,\r\n        image: post.images[0].url,\r\n      };\r\n\r\n      dispatch(createNotifyAction({ msg, auth, socket }));\r\n    } catch (error) {\r\n      dispatch(alertAction({ error: error.response.data.msg }));\r\n    }\r\n  };\r\n\r\nexport const updateCommentAction =\r\n  ({ comment, content, post, auth }) =>\r\n  async (dispatch) => {\r\n    const newComment = editDataSimple(post.comments, comment._id, {\r\n      ...comment,\r\n      content,\r\n    });\r\n    const newPost = { ...post, comments: newComment };\r\n    dispatch({\r\n      type: postTypes.EDITE_POST,\r\n      payload: newPost,\r\n    });\r\n    try {\r\n      await patchData(`comments/${comment._id}`, { content }, auth.token);\r\n    } catch (error) {\r\n      dispatch(alertAction({ error: error.response.data.msg }));\r\n    }\r\n  };\r\n\r\nexport const likeCommentAction =\r\n  ({ comment, post, auth }) =>\r\n  async (dispatch) => {\r\n    const newComment = { ...comment, likes: [...comment.likes, auth.user] };\r\n    const newComments = editDataSimple(post.comments, comment._id, newComment);\r\n    const newPost = { ...post, comments: newComments };\r\n    dispatch({\r\n      type: postTypes.EDITE_POST,\r\n      payload: newPost,\r\n    });\r\n    try {\r\n      await patchData(`comments/${comment._id}/like`, null, auth.token);\r\n    } catch (error) {\r\n      dispatch(alertAction({ error: error.response.data.msg }));\r\n    }\r\n  };\r\n\r\nexport const unLikeCommentAction =\r\n  ({ comment, post, auth }) =>\r\n  async (dispatch) => {\r\n    const newComment = {\r\n      ...comment,\r\n      likes: deleteDataSimple(comment.likes, auth.user._id),\r\n    };\r\n    const newComments = editDataSimple(post.comments, comment._id, newComment);\r\n    const newPost = { ...post, comments: newComments };\r\n    dispatch({\r\n      type: postTypes.EDITE_POST,\r\n      payload: newPost,\r\n    });\r\n    try {\r\n      await patchData(`comments/${comment._id}/unlike`, null, auth.token);\r\n    } catch (error) {\r\n      dispatch(alertAction({ error: error.response.data.msg }));\r\n    }\r\n  };\r\n\r\nexport const deleteCommentAction =\r\n  ({ post, auth, comment, socket }) =>\r\n  async (dispatch) => {\r\n    const deleteArr = [\r\n      ...post.comments.filter((item) => item.reply === comment._id),\r\n      comment,\r\n    ];\r\n\r\n    const newPost = {\r\n      ...post,\r\n      comments: post.comments.filter(\r\n        (item) => !deleteArr.find((da) => item._id === da._id)\r\n      ),\r\n    };\r\n\r\n    dispatch({\r\n      type: postTypes.EDITE_POST,\r\n      payload: newPost,\r\n    });\r\n    socket.emit(\"deleteComment\", newPost);\r\n\r\n    try {\r\n      deleteArr.forEach((item) => {\r\n        deleteData(`comments/${item._id}`, auth.token);\r\n        const msg = {\r\n          id: item._id,\r\n          text: comment.reply\r\n            ? \"mentioned you in a comment.\"\r\n            : \"has commented on your post.\",\r\n          recipients: comment.reply ? [comment.tag._id] : [post.user._id],\r\n          url: `/post/${post._id}`,\r\n        };\r\n        dispatch(removeNotifyAction({ msg, auth, socket }));\r\n      });\r\n    } catch (error) {\r\n      dispatch(alertAction({ error: error.response.data.msg }));\r\n    }\r\n  };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
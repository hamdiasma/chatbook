{"ast":null,"code":"export const chekImage = file => {\n  let err = \"\";\n\n  if (!file) {\n    err = \"File does not exist!\";\n    return err;\n  }\n\n  if (file.size > 1024 * 1024) {\n    err = \"the file have a big size!\";\n    return err;\n  }\n\n  if (file.type !== \"image/jpeg\" && file.type !== \"image/jpg\" && file.type !== \"image/png\") {\n    err = \"Image format not correct!\";\n    return err;\n  }\n};\nexport const imageUploade = async images => {\n  try {\n    let imgArr = [];\n\n    for (const item of images) {\n      const formData = new FormData();\n\n      if (item.camera) {\n        formData.append(\"file\", item.camera);\n      } else {\n        formData.append(\"file\", item);\n      }\n\n      formData.append(\"upload_preset\", \"social-media\");\n      formData.append(\"cloud-name\", \"hamdi-ba\");\n      const res = await fetch(\"https://api.cloudinary.com/v1_1/hamdi-ba/upload\", {\n        method: \"POST\",\n        body: formData\n      });\n      const data = await res.json();\n      imgArr.push({\n        public_id: data.public_id,\n        url: data.secure_url\n      });\n    }\n\n    return imgArr;\n  } catch (error) {}\n};","map":{"version":3,"names":["chekImage","file","err","size","type","imageUploade","images","imgArr","item","formData","FormData","camera","append","res","fetch","method","body","data","json","push","public_id","url","secure_url","error"],"sources":["C:/Users/owner/Desktop/my-applications/social-media/client/src/utils/imageUpload.js"],"sourcesContent":["export const chekImage = (file) => {\r\n  let err = \"\";\r\n  if (!file) {\r\n    err = \"File does not exist!\";\r\n    return err;\r\n  }\r\n  if (file.size > 1024 * 1024) {\r\n    err = \"the file have a big size!\";\r\n    return err;\r\n  }\r\n  if (\r\n    file.type !== \"image/jpeg\" &&\r\n    file.type !== \"image/jpg\" &&\r\n    file.type !== \"image/png\"\r\n  ) {\r\n    err = \"Image format not correct!\";\r\n    return err;\r\n  }\r\n};\r\n\r\nexport const imageUploade = async (images) => {\r\n  try {\r\n    let imgArr = [];\r\n    for (const item of images) {\r\n      const formData = new FormData();\r\n      if (item.camera) {\r\n        formData.append(\"file\", item.camera);\r\n      } else {\r\n        formData.append(\"file\", item);\r\n      }\r\n      formData.append(\"upload_preset\", \"social-media\");\r\n      formData.append(\"cloud-name\", \"hamdi-ba\");\r\n      const res = await fetch(\r\n        \"https://api.cloudinary.com/v1_1/hamdi-ba/upload\",\r\n        {\r\n          method: \"POST\",\r\n          body: formData,\r\n        }\r\n      );\r\n\r\n      const data = await res.json();\r\n\r\n      imgArr.push({\r\n        public_id: data.public_id,\r\n        url: data.secure_url,\r\n      });\r\n    }\r\n    return imgArr;\r\n  } catch (error) {}\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAIC,IAAD,IAAU;EACjC,IAAIC,GAAG,GAAG,EAAV;;EACA,IAAI,CAACD,IAAL,EAAW;IACTC,GAAG,GAAG,sBAAN;IACA,OAAOA,GAAP;EACD;;EACD,IAAID,IAAI,CAACE,IAAL,GAAY,OAAO,IAAvB,EAA6B;IAC3BD,GAAG,GAAG,2BAAN;IACA,OAAOA,GAAP;EACD;;EACD,IACED,IAAI,CAACG,IAAL,KAAc,YAAd,IACAH,IAAI,CAACG,IAAL,KAAc,WADd,IAEAH,IAAI,CAACG,IAAL,KAAc,WAHhB,EAIE;IACAF,GAAG,GAAG,2BAAN;IACA,OAAOA,GAAP;EACD;AACF,CAlBM;AAoBP,OAAO,MAAMG,YAAY,GAAG,MAAOC,MAAP,IAAkB;EAC5C,IAAI;IACF,IAAIC,MAAM,GAAG,EAAb;;IACA,KAAK,MAAMC,IAAX,IAAmBF,MAAnB,EAA2B;MACzB,MAAMG,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;;MACA,IAAIF,IAAI,CAACG,MAAT,EAAiB;QACfF,QAAQ,CAACG,MAAT,CAAgB,MAAhB,EAAwBJ,IAAI,CAACG,MAA7B;MACD,CAFD,MAEO;QACLF,QAAQ,CAACG,MAAT,CAAgB,MAAhB,EAAwBJ,IAAxB;MACD;;MACDC,QAAQ,CAACG,MAAT,CAAgB,eAAhB,EAAiC,cAAjC;MACAH,QAAQ,CAACG,MAAT,CAAgB,YAAhB,EAA8B,UAA9B;MACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CACrB,iDADqB,EAErB;QACEC,MAAM,EAAE,MADV;QAEEC,IAAI,EAAEP;MAFR,CAFqB,CAAvB;MAQA,MAAMQ,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;MAEAX,MAAM,CAACY,IAAP,CAAY;QACVC,SAAS,EAAEH,IAAI,CAACG,SADN;QAEVC,GAAG,EAAEJ,IAAI,CAACK;MAFA,CAAZ;IAID;;IACD,OAAOf,MAAP;EACD,CA3BD,CA2BE,OAAOgB,KAAP,EAAc,CAAE;AACnB,CA7BM"},"metadata":{},"sourceType":"module"}
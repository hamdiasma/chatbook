{"ast":null,"code":"import { deleteData, getData, postData } from \"../../utils/fetchData\";\nimport { deleteDataSimple } from \"../../utils/utilsFunction\";\nimport { messageTypes } from \"../type/types\";\nimport { alertAction } from \"./alert\";\nexport const addMessageAction = _ref => {\n  let {\n    msg,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    dispatch({\n      type: messageTypes.ADD_MESSAGE,\n      payload: msg\n    });\n    const {\n      _id,\n      avatar,\n      fullname,\n      username\n    } = auth.user;\n    const data = { ...msg,\n      user: {\n        _id,\n        avatar,\n        fullname,\n        username\n      }\n    };\n    socket.emit(\"addMessage\", data);\n\n    try {\n      await postData(\"message\", msg, auth.token);\n    } catch (error) {\n      dispatch(alertAction({\n        error: error.response.data.msg\n      }));\n    }\n  };\n};\nexport const getConversationAction = _ref2 => {\n  let {\n    auth,\n    page = 1\n  } = _ref2;\n  return async dispatch => {\n    try {\n      const res = await getData(`conversations?limit=${page * 9}`, auth.token);\n      let newArr = [];\n      res.data.conversaions.forEach(item => {\n        item.recipients.forEach(cv => {\n          if (cv._id !== auth.user._id) {\n            newArr.push({ ...cv,\n              text: item.text,\n              media: item.media,\n              call: item.call\n            });\n          }\n        });\n      });\n      dispatch({\n        type: messageTypes.GET_CONVERSATIONS,\n        payload: {\n          newArr,\n          resull: res.data.result\n        }\n      });\n    } catch (error) {\n      dispatch(alertAction({\n        error: error.response.data.msg\n      }));\n    }\n  };\n};\nexport const getMessagesAction = _ref3 => {\n  let {\n    auth,\n    id,\n    page = 1\n  } = _ref3;\n  return async dispatch => {\n    try {\n      const res = await getData(`messages/${id}?limit=${page * 9}`, auth.token);\n      const newData = { ...res.data,\n        messages: res.data.messages.reverse()\n      };\n      dispatch({\n        type: messageTypes.GET_MESSAGES,\n        payload: { ...newData,\n          _id: id,\n          page\n        }\n      });\n    } catch (error) {\n      dispatch(alertAction({\n        error: error.response.data.msg\n      }));\n    }\n  };\n};\nexport const loadMoreMessagesAction = _ref4 => {\n  let {\n    auth,\n    id,\n    page = 1\n  } = _ref4;\n  return async dispatch => {\n    try {\n      const res = await getData(`messages/${id}?limit=${page * 9}`, auth.token);\n      const newData = { ...res.data,\n        messages: res.data.messages.reverse()\n      };\n      dispatch({\n        type: messageTypes.UPDATED_GET_MESSAGES,\n        payload: { ...newData,\n          _id: id,\n          page\n        }\n      });\n    } catch (error) {\n      dispatch(alertAction({\n        error: error.response.data.msg\n      }));\n    }\n  };\n};\nexport const deleteMessageAction = _ref5 => {\n  let {\n    data,\n    msg,\n    auth\n  } = _ref5;\n  return async dispatch => {\n    const newData = deleteDataSimple(data, msg._id);\n    dispatch({\n      type: messageTypes.DELETE_MESSAGE,\n      payload: {\n        newData,\n        _id: msg.recipient\n      }\n    });\n\n    try {\n      await deleteData(`message/${msg._id}`, auth.token);\n    } catch (error) {\n      dispatch(alertAction({\n        error: error.response.data.msg\n      }));\n    }\n  };\n};\nexport const deleteConversationAction = _ref6 => {\n  let {\n    id,\n    auth\n  } = _ref6;\n  return async dispatch => {\n    dispatch({\n      type: messageTypes.DELETE_CONVERSATION,\n      payload: id\n    });\n\n    try {\n      await deleteData(`/conversation/${id}`, auth.token);\n    } catch (error) {\n      dispatch(alertAction({\n        error: error.response.data.msg\n      }));\n    }\n  };\n};","map":{"version":3,"names":["deleteData","getData","postData","deleteDataSimple","messageTypes","alertAction","addMessageAction","msg","auth","socket","dispatch","type","ADD_MESSAGE","payload","_id","avatar","fullname","username","user","data","emit","token","error","response","getConversationAction","page","res","newArr","conversaions","forEach","item","recipients","cv","push","text","media","call","GET_CONVERSATIONS","resull","result","getMessagesAction","id","newData","messages","reverse","GET_MESSAGES","loadMoreMessagesAction","UPDATED_GET_MESSAGES","deleteMessageAction","DELETE_MESSAGE","recipient","deleteConversationAction","DELETE_CONVERSATION"],"sources":["C:/Users/owner/Desktop/my-applications/social-media/client/src/redux/actions/message.js"],"sourcesContent":["import { deleteData, getData, postData } from \"../../utils/fetchData\";\r\nimport { deleteDataSimple } from \"../../utils/utilsFunction\";\r\nimport { messageTypes } from \"../type/types\";\r\nimport { alertAction } from \"./alert\";\r\n\r\nexport const addMessageAction =\r\n  ({ msg, auth, socket }) =>\r\n  async (dispatch) => {\r\n    dispatch({\r\n      type: messageTypes.ADD_MESSAGE,\r\n      payload: msg,\r\n    });\r\n    const { _id, avatar, fullname, username } = auth.user;\r\n    const data = { ...msg, user: { _id, avatar, fullname, username } };\r\n    socket.emit(\"addMessage\", data);\r\n\r\n    try {\r\n      await postData(\"message\", msg, auth.token);\r\n    } catch (error) {\r\n      dispatch(alertAction({ error: error.response.data.msg }));\r\n    }\r\n  };\r\nexport const getConversationAction =\r\n  ({ auth, page = 1 }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const res = await getData(`conversations?limit=${page * 9}`, auth.token);\r\n      let newArr = [];\r\n      res.data.conversaions.forEach((item) => {\r\n        item.recipients.forEach((cv) => {\r\n          if (cv._id !== auth.user._id) {\r\n            newArr.push({\r\n              ...cv,\r\n              text: item.text,\r\n              media: item.media,\r\n              call: item.call,\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      dispatch({\r\n        type: messageTypes.GET_CONVERSATIONS,\r\n        payload: { newArr, resull: res.data.result },\r\n      });\r\n    } catch (error) {\r\n      dispatch(alertAction({ error: error.response.data.msg }));\r\n    }\r\n  };\r\n\r\nexport const getMessagesAction =\r\n  ({ auth, id, page = 1 }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const res = await getData(`messages/${id}?limit=${page * 9}`, auth.token);\r\n      const newData = {\r\n        ...res.data,\r\n        messages: res.data.messages.reverse(),\r\n      };\r\n\r\n      dispatch({\r\n        type: messageTypes.GET_MESSAGES,\r\n        payload: { ...newData, _id: id, page },\r\n      });\r\n    } catch (error) {\r\n      dispatch(alertAction({ error: error.response.data.msg }));\r\n    }\r\n  };\r\n\r\nexport const loadMoreMessagesAction =\r\n  ({ auth, id, page = 1 }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const res = await getData(`messages/${id}?limit=${page * 9}`, auth.token);\r\n      const newData = {\r\n        ...res.data,\r\n        messages: res.data.messages.reverse(),\r\n      };\r\n\r\n      dispatch({\r\n        type: messageTypes.UPDATED_GET_MESSAGES,\r\n        payload: { ...newData, _id: id, page },\r\n      });\r\n    } catch (error) {\r\n      dispatch(alertAction({ error: error.response.data.msg }));\r\n    }\r\n  };\r\n\r\nexport const deleteMessageAction =\r\n  ({ data, msg, auth }) =>\r\n  async (dispatch) => {\r\n    const newData = deleteDataSimple(data, msg._id);\r\n    dispatch({\r\n      type: messageTypes.DELETE_MESSAGE,\r\n      payload: { newData, _id: msg.recipient },\r\n    });\r\n    try {\r\n      await deleteData(`message/${msg._id}`, auth.token);\r\n    } catch (error) {\r\n      dispatch(alertAction({ error: error.response.data.msg }));\r\n    }\r\n  };\r\n\r\nexport const deleteConversationAction =\r\n  ({ id, auth }) =>\r\n  async (dispatch) => {\r\n    dispatch({\r\n      type: messageTypes.DELETE_CONVERSATION,\r\n      payload: id,\r\n    });\r\n    try {\r\n      await deleteData(`/conversation/${id}`, auth.token);\r\n    } catch (error) {\r\n      dispatch(alertAction({ error: error.response.data.msg }));\r\n    }\r\n  };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}